plugins {
    id 'edu.sc.seis.launch4j' version '2.4.4'
    id 'org.openjfx.javafxplugin' version '0.0.7'
}

apply plugin: 'distribution'
apply plugin: 'application' // creates a task to run the full application

description = 'jGnash JavaFx'
mainClassName = "jGnashFx"

dependencies {
    compile project(':jgnash-help')
    compile project(':jgnash-core')
    compile project(':jgnash-convert')
    compile project(':jgnash-report-core')
    compile project(':jgnash-plugin')

    compile group: 'info.picocli', name: 'picocli', version: picocliVersion
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

launch4j {
    copyright = 'Copyright (C) 2001-2019 Craig Cavanaugh'
    mainClassName = 'jGnashFx'
    outfile = 'jGnashFx.exe'
    dontWrapJar = true
    icon = '../../gnome-money.ico'
}

task createStartScripts(type: CreateStartScripts) {
    outputDir = file('../../')
}

// call launch4j prior to creating the zip file
distZip.dependsOn(createExe)

// build the mt940 plugin prior to creating the zip file without creating a circular loop
distZip.dependsOn(":mt940:build")

// ensure the manual is built and included
distZip.dependsOn(":jgnash-help:asciidoctor")

distZip {
    into("jGnash-$version") {
        from '.'
        include 'scripts/*'
    }

    into("jGnash-$version") {
        from '../mt940/build/libs'
        include '*'
        into "jGnash-$version/plugins"
    }

    doLast {
        file("$destinationDir/$archiveName").renameTo("$destinationDir/"+'jGnashFx-'+version+'.zip')
    }
}

distributions {
    main {
        baseName = 'jGnash'
        contents {
            from { '../jgnash-help/build/asciidoc/pdf/Manual.pdf' }
            from { '../changelog.adoc' }
            from { 'build/launch4j/jGnashFx.exe' }
            from { '../README.html' }
            from { '../README.adoc' }
            from { '../jGnashFx' }
            exclude('**/*-linux*')  // excludes linux specific JavaFx modules from cross platform zip
            exclude('**/*-win*')    // excludes windows specific JavaFx modules from cross platform zip
            exclude('**/*-mac*')    // excludes mac specific JavaFx modules from cross platform zip
        }
    }
}

jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes  'Main-Class': 'jGnashFx',
                    'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }
}
